h = c(1:24)
Z <- array(h, dim=c(3,4,2))
Z
h = c(1:50)
Z <- array(h, dim=c(3,4,2))
Z
Z <- array(h, dim=c(3,4,2, 2))
z
indexedVector40Len = c(1:40) ; dim(indexedVector40Len) <-
c(10,2,2,2); indexedVector40Len
indexedVector40Len = c(1:80) ; dim(indexedVector40Len) <-
c(10,2,2,2); indexedVector40Len
indexedVector40Len = c(1:80) ; dim(indexedVector40Len) <-
c(10,2,4); indexedVector40Len
indexedVector40Len = c(1:80) ; dim(indexedVector40Len) <-
c(10,2,4,2); indexedVector40Len
indexedVector40Len = c(1:160) ; dim(indexedVector40Len) <-
c(10,2,4,2); indexedVector40Len
indexedVector40Len = c(1:160) ; dim(indexedVector40Len) <-
c(10,2,4,3); indexedVector40Len
indexedVector40Len = c(1:240) ; dim(indexedVector40Len) <-
c(10,2,4,3); indexedVector40Len
indexedVector40Len[1,2,1,2]
indexedVector40Len[1,1,4,3]
indexedVector40Len = c(1:240) ; dim(indexedVector40Len) <-
c(10,4,2,3); indexedVector40Len
indexedVector40Len[2,2,2,3]
z <- array(sample(1:20, replace=F), dim=c(3,4,2)); z
array(sample(1:30, replace=F), dim=c(5,3,3)); z
array(sample(1:30, replace=F), dim=c(5,3,3)); z
x <- array(sample(1:20, replace=F), dim=c(3,4,2));
y <- array(sample(1:20, replace=F), dim=c(3,4,2));
xr <- rbind(1, x, y)
xr
xr <- cbind(1, x, y)
xr
xr <- cbind(2, x, y)
xr
xr <- cbind(4, x, y)
xr
xr <- cbind(x, y)
xr
x <- array(sample(1:20, replace=F), dim=c(3,4,2));
y <- array(sample(1:30, replace=F), dim=c(3,4,2));
xr <- cbind(x, y)
xr
x <- array(sample(1:20, replace=F), dim=c(3,4,2));
class(x)
vec <- as.vector(x); vec
x
lst <- list(nombre="Juan", apellidos="Perez", edad="44", hijos=3,
estadoscivil="S", edadhijos=c(4,8,3));
lst
lst$edad
lst.edad
lst$edad
lst[1]
lst[2]
lst[3]
lst[4]
lst[5]
lst[6]
lst[7]
lst[]
lst[8]
lst[1]$nombre
lst[1]
lst[1]$nombre
lst$nombre
lst[$nombre]
lst["nombre"]
lst$nombre
lst["nombre"]
lst.ABC <- list(nombreA=c(11,22,33), nombreB="Cadena",
nombreC=990.1); lst.ABC$nombreA; lst.ABC$nombreB;
lst.ABC$nombreC
lst.ABC$nombreA
attach(lst.ABC)
lst.ABC$nombreA
nombreA
attach(lst)
lst
edad
search()
xr
attach(xr)
lst
nombre
nombre = "Pepe"
nombre
lst$nombre
nombre <- "Pepe"
nombre
lst$nombre
lst$nombre
detach(lst)
detach(lst.ABC)
nombre
lst$nombre
attach(lst)
nombre
lst$nombre
lst
View(lst)
View(lst.ABC)
View(lst)
lst
lst
detach(lst)
nombre
lst$nombre
attach(lst)
nombre
apellidos
detach(lst)
apellidos
nombre
setwd("~/Escritorio/CursoR")
setwd("~/Escritorio/CursoR/Datasets")
setwd("~/Escritorio/MachineLearning")
dataset = read.table("Datasets/Data.csv")
View(dataset)
dataset = read.table("Datasets/Data.csv", header = T)
dataset = read.table("Datasets/Data.csv", header = T, sep = ",")
x <- -1; if(x > 0) { message("x is positive") } else { message("x is
negative") }
x <- -1; if(x > 0) { message("x is positive") } else { message("x is negative") }
x <- -1; if(x > 0) { message(x+"x is positive") } else { message("x is negative") }
x <- -1; if(x > 0) { message(" is positive") } else { message(x+"x is negative") }
x <- -1; if(x > 0) { message(" is positive") } else { message(x%%"x is negative") }
a <- c(1, 1, 0, 1)
b <- c(2, 1, 0, 1)
ifelse(a == 1 & b == 1, "Si", "No")
for (value in sample(1:20, replace = T) ) print(value)
contador <- 0
while(contador < 5)
{}
contador <- 0
while(contador < 5)
{
print(contador)
contador <- contador + 1
}
sum = 0
repeat{
sum = sum + 2;
cat(sum); #concatena los resultados
if (sum > 11) break;
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente"); flush.console()
if(runif(1) > 0.95) { # runif genera valor partiendo de una distribución
uniforme cuyo valor máximo es el especificado
break
}
i <- i + 1
}
i <- 1
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
source('~/Escritorio/MachineLearning/EjerciciosR/testing.R')
source('~/Escritorio/MachineLearning/EjerciciosR/testing.R')
source('~/Escritorio/MachineLearning/EjerciciosR/testing.R')
source('~/Escritorio/MachineLearning/EjerciciosR/testing.R')
source('~/Escritorio/MachineLearning/EjerciciosR/testing.R')
source('~/Escritorio/MachineLearning/EjerciciosR/testing.R')
source('~/Escritorio/MachineLearning/EjerciciosR/testing.R')
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
i <- 1
repeat{
message("Iteración número: ", i, "... Siguiente");
flush.console()
if(runif(1) > 0.95) {
break
}
i <- i + 1
}
preg <- function() {
R <-0; while (R != 3.1415) { # Inicio del loop (while)
cat("Escriba el valor de PI hasta el 4to. decimal: ")
R <- readLines(n = 1) # Lee la respuesta del usuario
R <- as.numeric(R) # Convierte la respuesta en numeric
if (R == 3.1415) # Condicional 1
break # Corta y termina el loop
if (R > 3.1415) {
cat(" -- ese valor es muy ALTO ... intente de nuevo!\n")
} else {
cat(" -- ese valor es muy BAJO ... intente de nuevo!\n")
}
}
cat("¡Es correcto!\n")
}
preg()
preg()
is.numeric("a")
is.numeric(a)
a
is.numeric("a")
is.numeric(a)
is.numeric(1)
is.numeric("1")
is.character("1")
is.character(1)
# Ejercicio 3
# Dado un vector con 3 valores numericos, calcular cual es el valor maximo, utilizando if, else if, else
vector <- c(18,10,30)
maximo <- 0
if ( (vector[1] > vector[2]) & (vector[1] > vector[3]) ) {
maximo <- vector[1]
} else if (vector[2] > vector[3]) {
maximo <- vector[2]
} else {
maximo <- vector[3]
}
print(maximo)
# Ejercicio 4
# Crear una función que calcule la media de dos numeros pasados como parametros
media <- function(numero1,numero2) {
resultado <- (numero1 + numero2) / 2
return(resultado)
}
res <- media(14,8)
print(res)
# Ejercicio 5
# Crear una función que sume todos los elementos de una matriz
suma.matriz <- function(matriz) {
suma <- 0
for (elemento in matriz) {
suma <- suma + elemento
}
return(suma)
}
matriz <- matrix(1:10,nrow=5)
print(matriz)
resultado <- suma.matriz(matriz)
print(resultado)
